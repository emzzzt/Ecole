Introduction PHP

Programme client: programme qui necessite des informations qui provient du serveur (dans les cas des sites statiques et non dynamique)

requete et reponses sous un port (port 80 par exemple) les application doivent avoir un port reservé (mailserver, webserver etc.)
On parle de contenu dynamique lorsque la page Web présente
des informations qui peuvent changer (interactive)

http://www.atelierphp.net/lesson_01_environnement/lesson_01.php

//nous allons utiliser APACHE et easy php

le PHP n'est pas un language qui compile il est interpreté 
et ca génere du html entre les balises du PHP (Hypertext Preprocessor) il n'est pas fait pour 
etre executé dans Browser, il doit etre installer sur un serveur par exemple
avec un simulateur de serveur comme easyPHP (mamp pour mac c'est une application qui simule un serveur web sur Localhost), il y a aussi WEBDEV	webdev.cmaisonneuve.qc.ca (ceci est un vrai serveur et non un simulateur, nous aurons chacun nos adresses)
//WINSCP app est un application de transfert de fichiers et nous allons passer par cet app pour pousser des fichiers vers WEBDEV (on va pouvoir acceder avec un VPN  de la maison) 
// le TP de fin de session va etre assuremment remis sur WebDev (c'est un serveur en UNIX qui est case sensitive et Windows n'est pas Case sensitive car Windows est plus permissif MAC est beaucoup moins permissif donc d'ou l'expression IT WORKS ON MY MACHINE)
// le code PHP n'est pas open source


pour WAMP (c'est local et WEBDEV est serveur distant) :
explorateur de fichier windows -> C: -> wamp64 -> www  
// sur Wamp nous sommes responsable de nos fichiers et de faire des backups de ca.
pour acceder on ecrit : localhost/nomdufichier.html
//Wamp64 
dans BIN(binary) il y a des programmes installés par exemple APACHE, MARIADB, MYSQL, PHP
//Dans APACHE nous devrions avoir avoir un fichier la version d'apache et unnomdefichier.conf 
(httpd.conf)

# Listen: Allows you to bind Apache to specific IP addresses and/or
# ports, instead of the default. See also the <VirtualHost>
# directive.
#
# Change this to Listen on specific IP addresses as shown below to 
# prevent Apache from glomming onto all bound IP addresses.
#
#Listen 12.34.56.78:80
Listen 0.0.0.0:80
Listen [::0]:80


Dans PHP 
wAMP64 -> bin -> php -> php5.6.25 -> php.ini

[PHP]
; **************************************************************
; ****** DO NOT EDIT THIS FILE **** DO NOT EDIT THIS FILE ******
; * This file is only use by PHP CLI (Command Line Interface)  *
; * that is to say by Wampserver internal PHP scripts          *
; * THE CORRECT FILE TO EDIT is Wampmanager Icon->PHP->php.ini *
; * that is wamp/bin/apache/apache2.x.y/bin/php.ini            *
; **************************************************************

-------------------------------------------------------------------->

error_reporting = E_ALL

; This directive controls whether or not and where PHP will output errors,
; notices and warnings too. Error output is very useful during development, but
; it could be very dangerous in production environments. Depending on the code
; which is triggering the error, sensitive information could potentially leak
; out of your application such as database usernames and passwords or worse.
; For production environments, we recommend logging errors rather than
; sending them to STDOUT.
; Possible Values:
;   Off = Do not display any errors
;   stderr = Display errors to STDERR (affects only CGI/CLI binaries!)
;   On or stdout = Display errors to STDOUT
; Default Value: On
; Development Value: On
; Production Value: Off
; http://php.net/display-errors
display_errors = On

//tout doit etre comme ci-haut pour etre conscient des erreurs et on peut les mettre a off si on veut pas les afficher cote clients. valeur de developpement a ON et en production a OFF.

//Suite des notes de cours

PHP la fonction premiere de PHP , celle pour laquelle le language a ete creer, est d'aider a generer du HMTL dynamiquement.
On le melange donc generalement avec du HTML statique
On doit toujours placer le code PHP a executer entre les balises
<? php ..... ?>


http://localhost/Cours7/premierExemple.php

doit etre sur un serveur local (WAMP)


Toutes les lignes doivent se terminer par
un point-virgule.
• On peut mettre des commentaires avec //
et /*, comme en JavaScript.
Les Variables
Commencent toujours par $ et sont sensibles à la case 

Pas besoin de les déclarer
Typage faible : PHP convertit les données d’un type à l’autre au besoin.
Spécifier le type de variable est optionnel.
• Les fonctions is_int(var), is_float(var), is_bool(var), etc. retournent
true si le type de la variable est int, float, bool, etc

Les opérateurs sont nombreux. Voici les opérateurs
de base :
– = (assignation)
– + (addition)
– - (soustraction)
– * (multiplication)
– / (division) et % (modulo, « reste » de la division)
– . (concaténation de chaînes)
– ( et ) (pour créer des « expressions »)
– ==, !=, >=, <=, >, < (comparaison)
– && (ET logique) et || (OU logique)
– ++, -- (incrémentation et décrémentation)
– +=, -=, *=, /= (assignation après opération) 

pour a la maison
WAMP64 sur mon MAC c'est MAMP

et sur WebDev pour y acceder il y a les instruction sur le site pour installer le VPN du college
